// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Form {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User       @relation(fields: [createdById], references: [id])
    createdById String
    questions   Question[]
    responses   Response[]

    @@index([name])
}

model Question {
    id        String       @id @default(cuid())
    formId    String
    form      Form         @relation(fields: [formId], references: [id])
    text      String
    type      QuestionType
    options   Option[]
    responses Response[]
}

model Option {
    id         String   @id @default(cuid())
    questionId String
    question   Question @relation(fields: [questionId], references: [id])
    text       String
}

model Response {
    id         String   @id @default(cuid())
    questionId String
    question   Question @relation(fields: [questionId], references: [id])
    formId     String
    form       Form     @relation(fields: [formId], references: [id])
    value      Json
}

enum QuestionType {
    CHECKBOX
    MULTIPLE_CHOICE
    LINEAR_SCALE
    DROPDOWN
    FILE_INPUT
    TEXT
    DATE_TIME
    EMAIL
    PHONE_NUMBER
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String()
    access_token      String? @db.String()
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String()
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    forms         Form[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
